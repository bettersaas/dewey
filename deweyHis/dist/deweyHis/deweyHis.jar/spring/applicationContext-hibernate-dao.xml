<?xml version="1.0" encoding="GBK"?>
<!-- 
Spring3 DAO的配置文件
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/jee           http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
		http://www.springframework.org/schema/tx             http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context-3.0.xsd" default-autowire="byName">
    
    <!-- LobHandler for well-behaved JDBC drivers -->
	<!-- (simply delegating to corresponding PreparedStatement and ResultSet methods)  MySQL /  MS SQL Server / Oracle 10g-->
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"/>
	
    <!-- 
    	Hibernate配置 
		<property name="dataSource" ref="dataSource" />
		<property name="lobHandler" ref="lobHandler" />
    -->
    <!-- hibernate sessionFactory 创建 Hibernate SessionFactory  p:mappingResources="classpath:hibernate3/*.xml" hibernate3/userinfo.hbm.xml -->
	<bean id="sessionFactoryBase" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" p:lobHandler-ref="lobHandler">
		<!--   p:dataSource-ref="dataSource"   p:mappingLocations="classpath:hibernate3/*.xml" -->
    	<!-- 对使用annotation的对象扫描 -->
		<property name="packagesToScan">
			<list>
				<value>com.**.model</value>
				<value>hibernate</value>
			</list>
		</property>
		<!--property name="annotatedClasses">
			<list>
				<value>com.store.entity.Item</value>
			</list>
		</property -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernateDialect}</prop>
				<prop key="hibernate.connection.autocommit">false</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				
				<prop key="cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider</prop>
				<!-- prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.ehcache_config_file}</prop -->
				
				<prop key="current_session_context_class">thread</prop>
				<prop key="connection.pool_size">1</prop>
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.jdbc.batch_size">25</prop><!-- 0 -->
				<prop key="use_streams_for_binary">true</prop>
				
				<prop key="hibernate.connection.useUnicode">true</prop>
				<prop key="hibernate.connection.characterEncoding">gbk</prop>
				<prop key="hibernate.query.factory_class">org.hibernate.hql.ast.ASTQueryTranslatorFactory	</prop><!-- org.hibernate.hql.classic.ClassicQueryTranslatorFactory -->
				
				<!-- 使用二级缓存和查询缓存，提高性能 -->
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<!--
				     hibernate.hbm2ddl.auto=update
					 hibernate.query.substitutions=true 'Y', false 'N' 
					 hibernate.lazy=false
				-->
				<!-- prop key="hibernate.hbm2ddl.auto">create-drop</prop-->
				<!-- prop key="hibernate.cglib.use_reflection_optimizer">true</prop>
				<prop key="hibernate.proxool.xml">/WEB-INF/proxool.xml</prop>
				<prop key="hibernate.proxool.pool_alias">spring</prop-->
			</props>
		</property>
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
				</entry>
			</map>
		</property>
	</bean>
	<bean id="sessionFactory" parent="sessionFactoryBase" p:dataSource-ref="dataSource" />
	
	<!-- 配置mybatis的数据源
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" /> 
		<property name="configLocation" value="classpath:spring_ibaits_mapping.xml" />
	</bean> 
	 --> 
	<!--通过扫描的模式，扫描目录在com/hoo/mapper目录下，所有的mapper都继承SqlMapper接口的接口， 这样一个bean就可以了
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
		<property name="basePackage" value="com.stu.mapper" /> 
		<property name="markerInterface" value="com.stu.mapper.SqlMapper" /> 
	</bean>
	-->

	<!-- 单独配置一个Mapper； 这种模式就是得给每个mapper接口配置一个bean 
	<bean id="stuMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="mapperInterface" value="com.stu.mapper.MStudentDao" />
	</bean>
	-->
	
	<!-- bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean -->
	
	<!-- 事务管理器配置,单数据源事务 Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager" p:sessionFactory-ref="sessionFactory"/>
	
	<!-- 使用annotation定义事务      Activates @Transactional for DefaultImageDatabase 支持 @Transactional 标记  事务声明方式是注解 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.dewey.his.*.service.impl..*Impl.*(..))"  advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.dewey.his..*.*Manager.*(..))" advice-ref="txAdvice" />
 		<aop:advisor pointcut="execution(* com.dewey.his..*.*Dao.*(..))" advice-ref="txAdvice" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="is*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes> 
	</tx:advice>

    <!-- component-scan自动搜索@Component , @Controller , @Service , @Repository等标注的类 -->
	<context:component-scan base-package="com.**.dao"/>    
</beans>
